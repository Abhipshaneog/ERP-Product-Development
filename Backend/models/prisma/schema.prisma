generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")  // MongoDB connection string
}

model User {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String                  @unique
  passwordHash       String?                 @map("password_hash") // Optional for Google users
  googleId           String?                 @unique @map("google_id") // Add a field for Google ID
  phoneNumber        String?                 @map("phone_number")
  address            Json?
  profilePicture     String?                 @map("profile_picture")
  role               String                  @default("user")
  status             String                  @default("active")
  emailVerified      Boolean                 @default(false)
  phoneVerified      Boolean                 @default(false)
  loyaltyPoints      Int                     @default(0)
  lastLogin          DateTime?               @map("last_login") // Last login time
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @updatedAt @map("updated_at")

  // Relationships
  admin              Admin?                  @relation
  refreshTokens      RefreshToken[]          // One-to-many relationship with RefreshToken
  devices            Device[]                // One-to-many relationship with Device
  passwordResetTokens PasswordResetToken[]   // One-to-many relationship with PasswordResetToken
  notifications      Notification[]           // One-to-many relationship with Notification
}

model Admin {
  id           String  @id @map("_id") @db.ObjectId
  userId       String  @unique
  permissions  Json?
  isSuperadmin Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique              // Store the refresh token (hashed if required)
  userId      String                        // Foreign key to associate with the User
  deviceId    String?                       // Optional: Associate with a specific device
  expiresAt   DateTime                      // Expiration date of the token
  createdAt   DateTime @default(now())      // Timestamp of token creation

  user   User   @relation(fields: [userId], references: [id]) // Define the relation
  device Device? @relation(fields: [deviceId], references: [id], name: "DeviceRefreshTokens") // Optional relation to Device
}

model Device {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String                        // Foreign key to associate with the User
  deviceId    String   @unique              // Unique identifier for the device
  userAgent   String?                       // User agent string (e.g., browser or app info)
  ipAddress   String?                       // IP address of the device
  refreshToken String?                      // Current refresh token for this device
  createdAt   DateTime @default(now())      // Timestamp of device registration
  updatedAt   DateTime @updatedAt           // Timestamp of last activity

  user User @relation(fields: [userId], references: [id]) // Define the relation

  // Add opposite relation to RefreshToken
  refreshTokens RefreshToken[] @relation("DeviceRefreshTokens") // One-to-many relationship
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   // Email of the user requesting the password reset
  token     String   @unique              // Unique token for password reset
  expiresAt DateTime                      // Token expiration time
  createdAt DateTime @default(now())      // Timestamp of token creation

  user User @relation(fields: [email], references: [email]) // Define relation with User by email

  @@index([expiresAt], map: "ttl_index") // Add this line to index expiresAt
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   // Reference to the User
  title       String   // Title of the notification
  body        String   // Content of the notification
  type        String   // Notification type ('user', 'order', etc.)
  status      String   // Notification status ('unread', 'read')
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}
